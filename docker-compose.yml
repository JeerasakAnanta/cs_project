services:
  # Qdrant service - Vector database
  qdrant:
    container_name: chatbot_qdrant_vectorDB
    image: qdrant/qdrant:latest
    restart: always
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./qdrant_data:/qdrant/storage
    networks:
      - chatbot-network

  # Chatbot Web UI service
  chatbot_front:
    container_name: chatbot_webui
    image: chatbot_webui_cs_project:${CHATBOT_WEBUI}
    restart: always
    ports:
      - "80:80"
    env_file:
      - .env.production
    networks:
      - chatbot-network
    depends_on:
      - qdrant
      - chatbot_api

  # Chatbot API
  chatbot_api:
    container_name: chatbot_web_api
    image: chatbot_api_cs_project:${CHATBOT_API}
    restart: always
    ports:
      - "8003:8003"
    env_file:
      - .env
    volumes:
      - ./log/api:/app/log
    networks:
      - chatbot-network
    depends_on:
      - qdrant

  # Chatbot Create Collection
  create_collection:
    container_name: chatbot_management_api
    image: chatbot_pdf_management_api:${PDF_MANAGEMENT_API}
    restart: always
    ports:
      - "8004:8004"
    env_file:
      - ./.env
    volumes:
      - ./log/pdf:/app/log
      - ./pdf_Data:/app/pdfs
    networks:
      - chatbot-network
    depends_on:
      - qdrant
      - chatbot_api


networks:
  chatbot-network:
    driver: bridge
